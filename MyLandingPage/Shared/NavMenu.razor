@namespace MyLandingPage.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Shared.NavMenu> L
@inject IJSRuntime JS
@implements IAsyncDisposable

<header id="site-header" class="sticky-top navmenu-header">
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a href="@CurrentCulture" class="d-flex align-items-center logo-link">
                <img src="images/helm.svg" alt="Logo" class="logo-img me-2" />
                <span class="h4 mb-0 fw-bold navbar-title-text">@L["Site_Title"]</span>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
                <ul class="navbar-nav d-flex flex-wrap justify-content-center">
                    @* Home *@
                    <li class="nav-item">
                        <a class="nav-link text-nowrap"
                           href="#hero"
                           @onclick='@(async () => await NavigateOrScroll("hero"))'
                        @onclick:preventDefault>
                            @L["Nav_Hero"]
                        </a>
                    </li>
                    @* Programs — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/programs")">
                            @L["Nav_Programs"]
                        </NavLink>
                    </li>
                    @* Аренда яхт — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/charter")">
                            @L["Nav_Charter"]
                        </NavLink>
                    </li>
                    @* Our Fleet — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/fleet")">
                            @L["Nav_Fleet"]
                        </NavLink>
                    </li>
                    @* Яхтанг в Черногории — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/bareboat-charter")">
                            @L["Nav_Bareboat-Сharter"]
                        </NavLink>
                    </li>
                    @* Туры — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/tours")">
                            @L["Tours"]
                        </NavLink>
                    </li>
                    @* Contact *@
                    <li class="nav-item">
                        <a class="nav-link text-nowrap"
                           href="#contact-section"
                           @onclick='@(async () => await NavigateOrScroll("contact-section"))'
                        @onclick:preventDefault>
                            @L["Nav_Contact"]
                        </a>
                    </li>
                </ul>
                <div class="d-flex align-items-center justify-content-between navbar-book-up-container">
                    <select class="form-select form-select-sm language-select navbar-lang-selector"
                            @bind="CurrentCulture">
                        <option value="ru">Рус</option>
                        <option value="en">EN</option>
                    </select>

                    <a href="@($"{CurrentCulture}/survey/sail")" class="btn btn-primary btn-sm ms-3 text-nowrap">
                        @L["Nav_CTA"]
                    </a>
                </div>
            </div>
        </div>
    </nav>
</header>

@code {
    private string currentCulture = "en";
    private IJSObjectReference? cultureModule;
    private DotNetObjectReference<NavMenu>? objRef;
    
    public string CurrentCulture
    {
        get => currentCulture;
        set
        {
            if (value == currentCulture) return;
            currentCulture = value;
            ChangeCultureAndNavigate(currentCulture);
        }
    }

    bool IsOnHomePage
    {
        get
        {
            var path = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).TrimEnd('/');
            return path == CurrentCulture;
        }
    }

    async Task NavigateOrScroll(string sectionId)
    {
        if (IsOnHomePage)
        {
            await JS.InvokeVoidAsync("scrollToSection", sectionId);
        }
        else
        {
            // перейдём на главную с фрагментом — браузер прыгнет
            NavigationManager.NavigateTo($"{CurrentCulture}#{sectionId}", false);
        }
    }

    // private void ChangeCultureAndNavigate(string culture)
    // {
    //     if (string.IsNullOrEmpty(culture)) return;
    //     var uri = new Uri(NavigationManager.Uri);
    //     var segments = uri.AbsolutePath.Trim('/').Split('/', StringSplitOptions.RemoveEmptyEntries);

    //     if (segments.Length > 0 && (segments[0] == "ru" || segments[0] == "en"))
    //         segments[0] = culture;
    //     else
    //         segments = new[] { culture }.Concat(segments).ToArray();

    //     var newPath = string.Join('/', segments);
    //     NavigationManager.NavigateTo($"/{newPath}{uri.Query}", forceLoad: true);
    // }

    private async void ChangeCultureAndNavigate(string culture)
    {
        if (string.IsNullOrEmpty(culture))
            return;

        try
        {
            // Сохраняем культуру в localStorage и уведомляем другие вкладки
            if (cultureModule != null)
            {
                await cultureModule.InvokeVoidAsync("setCulture", culture);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка сохранения культуры: {ex.Message}");
        }

        // 1) Устанавливаем культуру .NET для локализатора
        var ci = new CultureInfo(culture);
        CultureInfo.DefaultThreadCurrentCulture = ci;
        CultureInfo.DefaultThreadCurrentUICulture = ci;

        // 2) Парсим текущий URI
        var currentUri = new Uri(NavigationManager.Uri);
        
        // 3) Получаем путь без BaseUri
        var baseUri = NavigationManager.BaseUri.TrimEnd('/');
        string relativePath;
        if (NavigationManager.Uri.StartsWith(baseUri, StringComparison.OrdinalIgnoreCase))
        {
            relativePath = NavigationManager.Uri.Substring(baseUri.Length).TrimStart('/');
        }
        else
        {
            relativePath = currentUri.AbsolutePath.TrimStart('/');
        }

        // 4) Разделяем путь и фрагмент
        var pathPart = relativePath;
        var fragment = currentUri.Fragment; // включает # если есть
        if (pathPart.Contains('#'))
        {
            var hashIndex = pathPart.IndexOf('#');
            fragment = pathPart.Substring(hashIndex);
            pathPart = pathPart.Substring(0, hashIndex);
        }

        // 5) Разбиваем путь на сегменты, удаляя все языковые коды
        var segments = pathPart.Trim('/')
            .Split('/', StringSplitOptions.RemoveEmptyEntries)
            .Where(s => s != "ru" && s != "en")
            .ToList();

        // 6) Формируем новый путь с культурой в начале
        var newPath = culture;
        if (segments.Count > 0)
        {
            newPath += "/" + string.Join('/', segments);
        }

        // 7) Добавляем query и fragment
        var newUrl = newPath + currentUri.Query + fragment;
        
        NavigationManager.NavigateTo(newUrl, forceLoad: true);
    }
    
    public async ValueTask DisposeAsync()
    {
        try
        {
            if (cultureModule != null)
            {
                await cultureModule.InvokeVoidAsync("unsubscribeFromCultureChanges");
                await cultureModule.DisposeAsync();
            }
            objRef?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка освобождения ресурсов NavMenu: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Загружаем модуль культуры
                cultureModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/culture.js");
                objRef = DotNetObjectReference.Create(this);
                
                // Инициализируем культуру из localStorage или URL
                var storedCulture = await cultureModule.InvokeAsync<string?>("getCulture");
                var urlCulture = GetCultureFromUrl();
                
                if (!string.IsNullOrEmpty(storedCulture) && (storedCulture == "ru" || storedCulture == "en"))
                {
                    currentCulture = storedCulture;
                }
                else if (!string.IsNullOrEmpty(urlCulture))
                {
                    currentCulture = urlCulture;
                    await cultureModule.InvokeVoidAsync("setCulture", currentCulture);
                }
                
                // Подписываемся на изменения культуры из других вкладок
                await cultureModule.InvokeVoidAsync("subscribeToCultureChanges", objRef);
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка инициализации культуры: {ex.Message}");
                // Fallback к определению из URL
                var urlCulture = GetCultureFromUrl();
                if (!string.IsNullOrEmpty(urlCulture))
                {
                    currentCulture = urlCulture;
                    StateHasChanged();
                }
            }
        }
    }
    
    private string? GetCultureFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri);
        var segments = uri.AbsolutePath.Trim('/').Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (segments.Length > 0 && (segments[0] == "ru" || segments[0] == "en"))
            return segments[0];
        return null;
    }
    
    [JSInvokable]
    public async Task OnCultureChanged(string culture)
    {
        if (culture != currentCulture && (culture == "ru" || culture == "en"))
        {
            currentCulture = culture;
            await InvokeAsync(StateHasChanged);
            
            // Обновляем URL без форсированной перезагрузки
            var currentUrl = NavigationManager.Uri;
            var newUrl = await cultureModule!.InvokeAsync<string>("updateUrlWithCulture", currentUrl, culture);
            NavigationManager.NavigateTo(newUrl, forceLoad: false);
        }
    }
}