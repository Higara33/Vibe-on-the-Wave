@namespace MyLandingPage.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Shared.NavMenu> L
@inject IJSRuntime JS

<header id="site-header" class="sticky-top">
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a href="@NavigationManager.BaseUri" class="d-flex align-items-center logo-link">
                <img src="images/helm.svg" alt="Logo" class="logo-img me-2" />
                <span class="h4 mb-0 fw-bold navbar-title-text">@L["Site_Title"]</span>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
                <ul class="navbar-nav">
                    @* Home *@
                    <li class="nav-item">
                        <a class="nav-link text-nowrap"
                           href="#hero"
                           @onclick='@(async () => await NavigateOrScroll("hero"))'
                        @onclick:preventDefault>
                            @L["Nav_Hero"]
                        </a>
                    </li>
                    @* Programs — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/programs")">
                            @L["Nav_Programs"]
                        </NavLink>
                    </li>
                    @* Аренда яхт — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/charter")">
                            @L["Nav_Charter"]
                        </NavLink>
                    </li>
                    @* Our Fleet — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/fleet")">
                            @L["Nav_Fleet"]
                        </NavLink>
                    </li>
                    @* Management — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/management")">
                            @L["Nav_Management"]
                        </NavLink>
                    </li>
                    @* Яхтанг в Черногории — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/bareboat-charter")">
                            @L["Nav_Bareboat-Сharter"]
                        </NavLink>
                    </li>
                    @* Туры — отдельная страница *@
                    <li class="nav-item">
                        <NavLink class="nav-link text-nowrap"
                                 href="@($"{CurrentCulture}/tours")">
                            @L["Tours"]
                        </NavLink>
                    </li>
                    @* Contact *@
                    <li class="nav-item">
                        <a class="nav-link text-nowrap"
                           href="#contact-section"
                           @onclick='@(async () => await NavigateOrScroll("contact-section"))'
                        @onclick:preventDefault>
                            @L["Nav_Contact"]
                        </a>
                    </li>
                </ul>
                <div class="d-flex align-items-center justify-content-between navbar-book-up-container">
                    <select class="form-select form-select-sm language-select navbar-lang-selector"
                            @bind="CurrentCulture">
                        <option value="ru">Рус</option>
                        <option value="en">EN</option>
                    </select>

                    <a href="survey/sail" class="btn btn-primary btn-sm ms-3 text-nowrap">
                        @L["Nav_CTA"]
                    </a>
                </div>
            </div>
        </div>
    </nav>
</header>

@code {
    private string currentCulture = "en";
    public string CurrentCulture
    {
        get => currentCulture;
        set
        {
            if (value == currentCulture) return;
            currentCulture = value;
            ChangeCultureAndNavigate(currentCulture);
        }
    }

    bool IsOnHomePage
    {
        get
        {
            var path = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).TrimEnd('/');
            return path == CurrentCulture;
        }
    }

    async Task NavigateOrScroll(string sectionId)
    {
        if (IsOnHomePage)
        {
            await JS.InvokeVoidAsync("scrollToSection", sectionId);
        }
        else
        {
            // перейдём на главную с фрагментом — браузер прыгнет
            NavigationManager.NavigateTo($"{CurrentCulture}#{sectionId}", false);
        }
    }

    // private void ChangeCultureAndNavigate(string culture)
    // {
    //     if (string.IsNullOrEmpty(culture)) return;
    //     var uri = new Uri(NavigationManager.Uri);
    //     var segments = uri.AbsolutePath.Trim('/').Split('/', StringSplitOptions.RemoveEmptyEntries);

    //     if (segments.Length > 0 && (segments[0] == "ru" || segments[0] == "en"))
    //         segments[0] = culture;
    //     else
    //         segments = new[] { culture }.Concat(segments).ToArray();

    //     var newPath = string.Join('/', segments);
    //     NavigationManager.NavigateTo($"/{newPath}{uri.Query}", forceLoad: true);
    // }

    private void ChangeCultureAndNavigate(string culture)
    {
        if (string.IsNullOrEmpty(culture))
            return;

        // 1) Устанавливаем культуру .NET для локализатора
        var ci = new CultureInfo(culture);
        CultureInfo.DefaultThreadCurrentCulture = ci;
        CultureInfo.DefaultThreadCurrentUICulture = ci;

        // 2) Берём текущий BaseUri ("/" или "/Vibe-on-the-Wave/")
        var baseUri = NavigationManager.BaseUri.TrimEnd('/');
        var fullUri = NavigationManager.Uri;

        // 3) Вычисляем относительный путь, удаляя BaseUri
        string relativePath;
        if (fullUri.StartsWith(baseUri, StringComparison.OrdinalIgnoreCase))
        {
            relativePath = fullUri.Substring(baseUri.Length).Trim('/');
        }
        else
        {
            // на случай, если BaseUri не совпал (например, при локальных обходах)
            relativePath = new Uri(fullUri).AbsolutePath.Trim('/');
        }

        // 4) Разбиваем на сегменты и удаляем старые коды "ru"/"en"
        var segments = relativePath
            .Split('/', StringSplitOptions.RemoveEmptyEntries)
            .Where(s => s != "ru" && s != "en")
            .ToList();

        // 5) Вставляем новый язык в начало
        segments.Insert(0, culture);

        // 6) Собираем новый относительный путь и переходим на него
        var newRelative = string.Join('/', segments);
        var query = new Uri(fullUri).Query;
        NavigationManager.NavigateTo(newRelative + query, forceLoad: true);
    }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var segments = uri.AbsolutePath.Trim('/').Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (segments.Length > 0 && (segments[0] == "ru" || segments[0] == "en"))
            currentCulture = segments[0];
    }
}